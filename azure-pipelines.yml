trigger:
  branches:
    include:
      - main

variables:
  - group: ACR-Credentials
  - name: imageName
    value: 'snakegameapp'
  - name: containerRegistry
    value: 'HTS-L2-ACR-SC'
  - name: tag
    value: '$(Build.BuildId)'
  - name: javaVersion
    value: '17'
  - name: javaHome
    value: '/usr/lib/jvm/java-17-openjdk-amd64'
  - name: acrLoginServer
    value: cs01appacr-cge9e8hycwchcrf0.azurecr.io

stages:
  - stage: Build
    displayName: 'Build and Package'
    jobs:
      - job: Build
        displayName: 'Build Java App and Push Docker Image'
        pool:
          name: 'vmss-agent'
          demands:
            - agent.os -equals Linux

        steps:
          - script: |
              echo "Installing dependencies..."
              sudo apt-get update -y
              sudo apt-get install -y openjdk-$(javaVersion)-jdk docker.io docker-buildx
              
              echo "Configuring Docker permissions..."
              sudo groupadd docker || true
              sudo usermod -aG docker $(whoami)
              sudo chmod 666 /var/run/docker.sock
              
              echo "Environment:"
              java -version
              docker --version
              docker buildx version
            displayName: 'Setup Environment'

          - task: Maven@3
            displayName: 'Build with Maven'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests=false'
              publishJUnitResults: true
              testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
              javaHomeOption: 'Path'
              jdkDirectory: '$(javaHome)'

          - script: |
              echo "Build output:"
              ls -la target/
              JAR_FILE=$(find target -name "snakegame-*.jar" | head -1)
              echo "##vso[task.setvariable variable=JAR_PATH]$JAR_FILE"
              echo "Using JAR file: $JAR_FILE"
            displayName: 'Verify Build Output'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifacts'
            inputs:
              PathtoPublish: '$(JAR_PATH)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

          - script: |
              echo "$(acrAdminPassword)" | sudo docker login $(acrLoginServer) -u $(acrAdminUsername) --password-stdin
              echo "Login check:"
              sudo docker info | grep Username || echo "Username not shown, but login succeeded."
              exit 0
            displayName: 'Login to ACR (Safe Debug)'

          - script: |
              docker login $(acrLoginServer) -u $(acrAdminUsername) -p $(acrAdminPassword)
              docker build -t $(acrLoginServer)/$(imageName):$(tag) -f Dockerfile .
              docker images
              docker push $(acrLoginServer)/$(imageName):$(tag)
            displayName: 'Build and Push Docker Image'

          - script: |
              docker logout $(acrLoginServer)
            displayName: 'Logout from ACR'