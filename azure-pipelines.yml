trigger:
  branches:
    include:
      - main

variables:
  - group: ACR-Credentials
  - name: imageName
    value: 'snakegameapp'
  - name: containerRegistry
    value: 'HTS-L2-ACR-SC'
  - name: tag
    value: '$(Build.BuildId)'
  - name: mavenVersion
    value: '3.9.6'
  - name: javaVersion
    value: '17'
  - name: javaHome
    value: '/usr/lib/jvm/java-17-openjdk-amd64'

stages:
  - stage: Build
    displayName: 'Build and Package'
    jobs:
      - job: Build
        displayName: 'Build Java Application'
        pool:
          name: 'vmss-agent'
          demands:
          - agent.os -equals Linux
        
        steps:
          # Install JDK 17
          - script: |
              echo "Installing JDK $(javaVersion)..."
              sudo apt-get update -y
              sudo apt-get install -y openjdk-$(javaVersion)-jdk
              echo "JAVA_HOME=$(javaHome)" | sudo tee -a /etc/environment
              echo "##vso[task.setvariable variable=JAVA_HOME]$(javaHome)"
              echo "##vso[task.prependpath]$(javaHome)/bin"
              java -version
              javac -version
            displayName: 'Install and Configure JDK $(javaVersion)'
          
          # Maven build
          - task: Maven@3
            displayName: 'Maven Build and Test'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests=false'
              publishJUnitResults: true
              testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
              javaHomeOption: 'Path'
              jdkDirectory: '$(javaHome)'
              mavenVersionOption: 'Default'

          # Verify JAR file
          - script: |
              echo "Checking build output..."
              ls -la target/
              echo "JAR file:"
              JAR_FILE=$(find target -name "snakegame-*.jar" | head -1)
              echo "##vso[task.setvariable variable=JAR_PATH]$JAR_FILE"
              echo "Using JAR file: $JAR_FILE"
            displayName: 'Verify Build Output'

          # Publish artifacts
          - task: PublishBuildArtifacts@1
            displayName: 'Publish JAR Artifacts'
            inputs:
              PathtoPublish: '$(JAR_PATH)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

          # Docker setup
          - script: |
              echo "Setting up Docker..."
              sudo apt-get install -y docker.io
              sudo groupadd docker || true
              sudo usermod -aG docker $(whoami)
              sudo chmod 666 /var/run/docker.sock
              docker --version
            displayName: 'Configure Docker Environment'

          # Install Azure CLI
          - script: |
              echo "Installing Azure CLI..."
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
              echo "Azure CLI version:"
              az --version
            displayName: 'Install Azure CLI'

          # ACR authentication
          - task: AzureCLI@2
            displayName: 'Login to ACR with Azure AD'
            inputs:
              azureSubscription: 'HTS-L2-ARM-SC'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr login --name $(containerRegistry)

          # Docker build and push
          - task: Docker@2
            displayName: 'Build and Push Docker Image'
            inputs:
              containerRegistry: 'HTS-L2-ACR-SC'
              repository: '$(imageName)'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: '$(tag)'