trigger:
  branches:
    include:
      - main

variables:
  imageName: 'snakegameapp'
  containerRegistry: 'HTS-L2-ACR-SC'  # Must match service connection name exactly
  tag: '$(Build.BuildId)'
  javaVersion: '17'
  javaHome: '/usr/lib/jvm/java-17-openjdk-amd64'

stages:
  - stage: Build
    displayName: 'Build and Package'
    jobs:
      - job: Build
        displayName: 'Build Java App and Push Docker Image'
        pool:
          name: 'vmss-agent'
          demands:
            - agent.os -equals Linux

        steps:
          # Install JDK and Docker with proper permissions
          - script: |
              echo "Installing dependencies..."
              sudo apt-get update -y
              sudo apt-get install -y openjdk-$(javaVersion)-jdk docker.io docker-buildx
              
              echo "Configuring Docker permissions..."
              sudo groupadd docker || true
              sudo usermod -aG docker $(whoami)
              sudo chmod 666 /var/run/docker.sock
              
              echo "Environment:"
              java -version
              docker --version
              docker buildx version
            displayName: 'Setup Environment'

          # Maven build
          - task: Maven@3
            displayName: 'Build with Maven'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests=false'
              publishJUnitResults: true
              testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
              javaHomeOption: 'Path'
              jdkDirectory: '$(javaHome)'

          # Verify JAR file
          - script: |
              echo "Build output:"
              ls -la target/
              JAR_FILE=$(find target -name "snakegame-*.jar" | head -1)
              echo "##vso[task.setvariable variable=JAR_PATH]$JAR_FILE"
              echo "Using JAR file: $JAR_FILE"
            displayName: 'Verify Build Output'

          # Publish JAR
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifacts'
            inputs:
              PathtoPublish: '$(JAR_PATH)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

          # Docker build and push using service connection
          - task: Docker@2
            displayName: 'Build and Push Image'
            inputs:
              containerRegistry: '$(containerRegistry)'
              repository: '$(imageName)'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: '$(tag)'
              arguments: '--load'  # Required for BuildKit